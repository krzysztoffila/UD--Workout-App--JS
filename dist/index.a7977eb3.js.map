{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["\"use strict\";\nclass Workout {\n    date = new Date();\n    id = (Date.now() + \"\").slice(-10);\n    constructor(coords, distance, duration){\n        this.coords = coords;\n        this.distance = distance;\n        this.duration = duration;\n    }\n    _setDescription() {\n        // prettier-ignore\n        const months = [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\"\n        ];\n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`;\n    }\n}\nclass Running extends Workout {\n    type = \"running\";\n    constructor(coords, distance, duration, cadence){\n        super(coords, distance, duration);\n        this.cadence = cadence;\n        this.calcPace();\n        this._setDescription();\n    }\n    calcPace() {\n        this.pace = this.duration / this.distance;\n        return this.pace;\n    }\n}\nclass Cycling extends Workout {\n    type = \"cycling\";\n    constructor(coords, distance, duration, elevationGain){\n        super(coords, distance, duration);\n        this.elevationGain = elevationGain;\n        this.calcSpeed();\n        this._setDescription();\n    }\n    calcSpeed() {\n        this.speed = this.distance / (this.duration / 60);\n        return this.speed;\n    }\n}\n////////////////////////////\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector(\".form\");\nconst containerWorkouts = document.querySelector(\".workouts\");\nconst inputType = document.querySelector(\".form__input--type\");\nconst inputDistance = document.querySelector(\".form__input--distance\");\nconst inputDuration = document.querySelector(\".form__input--duration\");\nconst inputCadence = document.querySelector(\".form__input--cadence\");\nconst inputElevation = document.querySelector(\".form__input--elevation\");\nclass App {\n    #map;\n    #mapEvent;\n    #mapZoomLevel = 13;\n    #workouts = [];\n    constructor(){\n        this._getPosition();\n        this._getLocalStorage();\n        form.addEventListener(\"submit\", this._newWorkout.bind(this));\n        inputType.addEventListener(\"change\", this._toggleElewationField);\n        containerWorkouts.addEventListener(\"click\", this._moveToPopup.bind(this));\n    }\n    _getPosition() {\n        if (navigator.geolocation) navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function() {\n            alert(\"Could not get your position\");\n        });\n    }\n    _loadMap(position) {\n        const { latitude, longitude } = position.coords;\n        const coords = [\n            latitude,\n            longitude\n        ];\n        this.#map = L.map(\"map\").setView(coords, this.#mapZoomLevel);\n        L.tileLayer(\"https://tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\", {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this.#map);\n        this.#map.on(\"click\", this._showForm.bind(this));\n        this.#workouts.forEach((work)=>{\n            this._renderWorkoutMarker(work);\n        });\n    }\n    _showForm(mapE) {\n        this.#mapEvent = mapE;\n        form.classList.remove(\"hidden\");\n        inputDistance.focus();\n    }\n    _hideForm() {\n        inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = \"\";\n        form.style.display = \"none\";\n        form.classList.add(\"hidden\");\n        setTimeout(()=>form.style.display = \"grid\", 1000);\n    }\n    _toggleElewationField() {\n        inputElevation.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\n        inputCadence.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\n    }\n    _newWorkout(e) {\n        const validInputs = (...inputs)=>inputs.every((inp)=>Number.isFinite(inp));\n        const allPositive = (...inputs)=>inputs.every((inp)=>inp > 0);\n        e.preventDefault();\n        const type = inputType.value;\n        const distance = +inputDistance.value;\n        const duration = +inputDuration.value;\n        const { lat, lng } = this.#mapEvent.latlng;\n        let workout;\n        if (type === \"running\") {\n            const cadence = +inputCadence.value;\n            if (!validInputs(distance, duration, cadence) || !allPositive(distance, duration, cadence)) return alert(\"Inputs have to be positive numbers!\");\n            workout = new Running([\n                lat,\n                lng\n            ], distance, duration, cadence);\n        }\n        if (type === \"cycling\") {\n            const elevation = +inputElevation.value;\n            if (!validInputs(distance, duration, elevation) || !allPositive(distance, duration)) return alert(\"Inputs have to be positive numbers!\");\n            workout = new Cycling([\n                lat,\n                lng\n            ], distance, duration, elevation);\n        }\n        this.#workouts.push(workout);\n        this._renderWorkout(workout);\n        this._renderWorkoutMarker(workout);\n        this._hideForm();\n        this._setLocalStorage();\n    }\n    _renderWorkoutMarker(workout) {\n        const { coords, type, description } = workout;\n        L.marker(coords).addTo(this.#map).bindPopup(L.popup({\n            maxWidth: 250,\n            minWidth: 100,\n            autoClose: false,\n            closeOnClick: false,\n            className: `${type}-popup`\n        })).setPopupContent(`${type === \"running\" ? \"\\uD83C\\uDFC3\\u200D\\u2642\\uFE0F\" : \"\\uD83D\\uDEB4\\u200D\\u2640\\uFE0F\"} ${description}`).openPopup();\n    }\n    _renderWorkout(workout) {\n        let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${workout.type === \"running\" ? \"\\uD83C\\uDFC3\\u200D\\u2642\\uFE0F\" : \"\\uD83D\\uDEB4\\u200D\\u2640\\uFE0F\"}</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>    \n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{23F1}</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n      `;\n        if (workout.type === \"running\") html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{26A1}\\u{FE0F}</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{1F9B6}\\u{1F3FC}</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n        if (workout.type === \"cycling\") html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{26A1}\\u{FE0F}</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{26F0}</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>\n      `;\n        form.insertAdjacentHTML(\"afterend\", html);\n    }\n    _moveToPopup(e) {\n        const workoutEl = e.target.closest(\".workout\");\n        if (!workoutEl) return;\n        const workout = this.#workouts.find((work)=>work.id === workoutEl.dataset.id);\n        this.#map.setView(workout.coords, this.#mapZoomLevel, {\n            animate: true,\n            pan: {\n                duration: 1\n            }\n        });\n    }\n    _setLocalStorage() {\n        localStorage.setItem(\"workouts\", JSON.stringify(this.#workouts));\n    }\n    _getLocalStorage() {\n        const data = JSON.parse(localStorage.getItem(\"workouts\"));\n        if (!data) return;\n        this.#workouts = data;\n        this.#workouts.forEach((work)=>{\n            this._renderWorkout(work);\n        });\n    }\n    reset() {\n        localStorage.removeItem(\"workouts\");\n        location.reload();\n    }\n}\nconst app = new App(); // Challenges:\n // Edit a workout\n // Delete a workout\n // Delete all workouts\n // sort by distance\n // Rebuild Running and Cycling objects coming from local storage\n // More realistic error and confirmation messages\n // draw lines and shapes instead of just points [HARD]\n // Geocode location from coordinates [HARD] - async\n // Display weather\n\n//# sourceMappingURL=index.a7977eb3.js.map\n","'use strict';\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  constructor(coords, distance, duration) {\n    this.coords = coords;\n    this.distance = distance;\n    this.duration = duration;\n  }\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n}\nclass Running extends Workout {\n  type = 'running';\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n  calcPace() {\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\nclass Cycling extends Workout {\n  type = 'cycling';\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    this.calcSpeed();\n    this._setDescription();\n  }\n  calcSpeed() {\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n////////////////////////////\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  #map;\n  #mapEvent;\n  #mapZoomLevel = 13;\n  #workouts = [];\n\n  constructor() {\n    this._getPosition();\n    this._getLocalStorage();\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElewationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n  _loadMap(position) {\n    const { latitude, longitude } = position.coords;\n    const coords = [latitude, longitude];\n\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    L.tileLayer('https://tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    this.#map.on('click', this._showForm.bind(this));\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n  _hideForm() {\n    inputDistance.value =\n      inputDuration.value =\n      inputCadence.value =\n      inputElevation.value =\n        '';\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n  _toggleElewationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      if (\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n    this.#workouts.push(workout);\n    this._renderWorkout(workout);\n    this._renderWorkoutMarker(workout);\n    this._hideForm();\n    this._setLocalStorage();\n  }\n  _renderWorkoutMarker(workout) {\n    const { coords, type, description } = workout;\n    L.marker(coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${type}-popup`,\n        })\n      )\n      .setPopupContent(`${type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${description}`)\n      .openPopup();\n  }\n  _renderWorkout(workout) {\n    let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${\n            workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n          }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>    \n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n      `;\n\n    if (workout.type === 'running')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n\n    if (workout.type === 'cycling')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⛰</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>\n      `;\n    form.insertAdjacentHTML('afterend', html);\n  }\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n    if (!workoutEl) return;\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n  }\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n    if (!data) return;\n\n    this.#workouts = data;\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\nconst app = new App();\n// Challenges:\n// Edit a workout\n// Delete a workout\n// Delete all workouts\n// sort by distance\n// Rebuild Running and Cycling objects coming from local storage\n// More realistic error and confirmation messages\n// draw lines and shapes instead of just points [HARD]\n// Geocode location from coordinates [HARD] - async\n// Display weather\n"],"names":["Workout","date","Date","id","now","slice","constructor","coords","distance","duration","_setDescription","description","type","toUpperCase","months","getMonth","getDate","Running","cadence","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElewationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","map","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","workout","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","elevation","push","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem","location","reload"],"version":3,"file":"index.a7977eb3.js.map"}